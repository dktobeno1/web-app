# -*- coding:utf-8 -*-
__author__='Mr du'
import asyncio,logging,aiomysql
#aiomysql为MySQL数据库提供异步IO的驱动
def log(sql,args=()):
    logging.info('SQL:%s'%sql)
async def create_pool(loop,**kw):
    logging.info('create database connection pool...')
    global __pool
    __pool=await aiomysql.create_pool(
        host=kw.get('host','localhost'),
        port=kw.get('port',3306),
        user=kw['user'],
        password=kw['password'],
        db=kw['db'],
        charset=kw.get('charget','utf8'),
        autocommit=kw.get('autocommit','true'),
        maxsize=kw.get('maxsize',10),
        minsize=kw.get('minsize',1),
        loop=loop
        )
#声明查询函数
async def select(sql,args,size=None):
    log(sql,args)
    global __pool
    try:
        conn=await __pool.get()
        cur=await conn.cursor(aiomysql.DictCursor)
        await cur.execute(sql.replace('?','%s'),args or ())
        if size:
            rs=await cur.fetchmany(size)
        else:
            rs=await cur.fetchall()
        await cur.close()
    except BaseException as e:
        raise
    finally:
        conn.colse()
    return rs
#声明INSERT、UPDATE、DELETE语句通用的execute()函数
async def execute(sql,args,autocommit=True):
    log(sql)
    global __pool
    try:
        conn=await __pool.get()
        if not autocommit:
            await conn.begin()
        cur=await conn.cursor(aiomysql.DictCursor)
        await cur.execute(sql.replace('?','%s'),args)
        affected=cur.rowcount
        if not autocommit:
            await conn.commit()
        await cur.close()
    except BaseException as e:
        raise
    finally:
        conn.close()
    return affected

def create_args_string(num):
    l=[]
    for n in range(num):
        l.append('?')
    return ','.join(l)

#创建一个Field类来标记关联数据库表列名的类属性，以便元类识别和操作
class Field(object):
    def __init__(self,name,column_type,primary_key,default):
        self.name=name
        self.column_type = column_type
        self.primary_key = primary_key
        self.default = default
    def __str__(self):
        return '<%s,%s:%s>'%(self.__class__.__name__,self.column_type,self.name)

#进一步划分字符串字段等各数据类型字段
class StringField(Field):
    def __init__(self,*,name=None,primary_key=False,ddl='varchar(100)', default=None):
        super().__init__(name,ddl,primary_key,default)
class IntegerField(Field):
    def __init__(self,*,name=None, primary_key=False, default=0):
        super().__init__(name,'bigint',primary_key,default)
class BooleanField(Field):
    def __init__(self,*,name=None, default=False):
        super().__init__(name, 'boolean', False, default)
class FloatField(Field):
    def __init__(self,*,name=None, primary_key=False, default=0.0):
        super().__init__(name, 'real', primary_key, default)
class TextField(Field):
    def __init__(self,*,name=None, default=None):
        super().__init__(name, 'text', False, default)

#创建用来做映射信息读取的元类ModelMetaclass
class ModelMetaclass(type):
    def __new__(cls,name,bases,attrs):
        if name=='Model':
            return type.__new__(cls,name,bases,attrs)
        tableName=attrs.get('__table__',None) or name
        logging.info('found class:%s(table:%s)'%(name,tableName))
        mappings=dict()
        fields=[]
        primaryKey=None
        for k,v in attrs.items():
            if isinstance(v,Field):
                logging.info('  found mapping: %s ==> %s' % (k, v))
                mappings[k]=v
                if v.primary_key==True:
                    if primaryKey:
                        raise StandardError('Duplicate primary key for field: %s' % k)
                    else:
                        primaryKey=k
                else:
                    #将除主键以外的列名放入fields中
                    fields.append(k)
        if not primaryKey:
            raise StandardError('Primary key not found.')
        for k in mappings:
            attrs.pip(k)
        escaped_fields=list(map(lambda f:'`%s`'%f,fields))
        # 保存属性和列的映射关系
        attrs['__mappings__']=mappings
        #表名
        attrs['__table__']=tableName
        #主键名
        attrs['__primary_key__']=primaryKey
        #除主键外的列名
        attrs['__fields__']=fields
        #构造默认的SELECT, INSERT, UPDATE和DELETE语句:
        attrs['__select__']='select `%s`,%s from `%s`'%(primaryKey,','.join(escaped_fields),tableName)
        attrs['__insert__']='insert into `%s` (%s,`%s`) values(%s)'%(tableName,','.join(escaped_fields),primaryKey,create_args_string(len(escaped_fields)+1))
        attrs['__update__']='update `%s` set %s where `%s`=?'%(tableName,','.join(map(lambda f:'`%s`=?'%f,fields)),primaryKey)
        attrs['__delete__']='delete from `%s` where `%s`=?'%(tableName,primaryKey)
        return type.__new__(cls,name,bases,attrs)
#创建所有表类（与数据库表相互关联的类）的基类Model
class Model(dict,metaclass=ModelMetaclass):
    def __init__(self,**kw):
        super(Model,self).__init__(**kw)
    def __getattr__(self,key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Model' object has no attribute '%s'" % key)
    def __setattr__(self,key,value):
        self[key]=value
    def getValue(self,key):
        return self.get(key,None)
    def getValueorDefault(self,key):
        value=getattr(self,key,None)
        if not value:
            field=self.__mappings__[key]
            if field.default is not None:
                value=field.default() if callable(field.default) else field.default
                logging.debug('using default value for %s: %s' % (key, str(value)))
                setattr(self,key,value)
        return value

    #定义各种类方法、实例方法
    @classmethod
    async def findall(cls,where=None,args=None,**kw):
        sql=[cls.__select__]
        if where:
            sql.append('where')
            sql.append(where)
        if not args:
            args=[]
        orderBy=kw.get('orderBy',None)
        if orderBy:
            sql.append('order by')
            sql.append(orderBy)
        limit=kw.get('limit',None)
        if limit:
            sql.append('limit')
            if isinstance(limit,int):
                sql.append('?')
                args.append(limit)
            elif isinstance(limit,tuple) and len(limit)==2:
                sql.append('?,?')
                args.append(limit)
            else:
                raise ValueError('Invalid limit value: %s' % str(limit))
        rs=await select(' '.join(sql),args)
        return rs
    @classmethod
    async def find(cls,pk):
        #按主键查询
        rs=await select('%s where `%s`=?'%(cls.__select__,cls.__primary_key__),[pk],1)
        if len(rs)==0:
            return '没有%s是%s的记录'%(cls.__primary_key__,pk)
        return cls(**rs[0])

    async def save(self):
        args=list(map(self.getValueorDefault,sef.__fields__))
        args.append(self.getValueorDefault(self.__primary_key__))
        rows=await execute(self.__insert__,args)
        if rows != 1:
            logging.warn('failed to insert record: affected rows: %s' % rows)
    async def update(self):
        args=list(map(self.getValue,self.__fields__))
        args.append(self.getValue(self.__primary_key__))
        rows=await execute(self.__update__,args)
        if rows !=1:
            logging.warn('failed to update by primary key: affected rows: %s' % rows)
    async def remove(self):
        args=[self.getValue(self.__primary_key__)]
        rows=await execute(self.__delete__,args)
        if rows !=1:
            logging.warn('failed to remove by primary key: affected rows: %s' % rows)
            
        
        
    
        
        








        
    
        
    
    


        
